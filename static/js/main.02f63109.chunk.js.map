{"version":3,"sources":["lib/words.js","lib/randomWords.js","components/TextDisplay.js","App.js","serviceWorker.js","index.js"],"names":["words","getRandomWords","length","arr","push","Math","floor","random","colors","TextDisplay","props","breakText","text","split","filter","ele","handlePropsChange","newProps","typedWords","typedText","displayedWords","state","wordObjects","i","min","bgColor","value","correct","setState","isComplete","resetWords","randomWords","getWordsObjects","resetCallback","map","word","oldProps","this","className","id","style","backgroundColor","key","React","Component","App","handleInput","e","target","resetInput","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.02f63109.chunk.js","sourcesContent":["export const words = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\"dusty\",\"spade\",\"flowers\",\"competition\",\"selfish\",\"fallacious\",\"brainy\",\"hum\",\"special\",\"frequent\",\"bite\",\"taste\",\"religion\",\"unbecoming\",\"festive\",\"illustrious\",\"jaded\",\"private\",\"lunchroom\",\"imagine\",\"beg\",\"zesty\",\"calendar\",\"puny\",\"violet\",\"stretch\",\"cloistered\",\"minister\",\"frame\",\"office\",\"four\",\"switch\",\"grain\",\"try\",\"true\",\"practise\",\"snails\",\"round\",\"quiet\",\"fetch\",\"flowery\",\"wrestle\",\"faded\",\"camera\",\"crowded\",\"quiver\",\"snobbish\",\"introduce\",\"squeak\",\"diligent\",\"feigned\",\"unit\",\"refuse\",\"sidewalk\",\"pass\",\"rub\",\"domineering\",\"bore\",\"six\",\"scarecrow\",\"purring\",\"flagrant\",\"breath\",\"laughable\",\"divide\",\"choke\",\"voice\",\"panicky\",\"year\",\"earsplitting\",\"unknown\",\"division\",\"visit\",\"complain\",\"sassy\",\"bone\",\"heartbreaking\",\"delirious\",\"supply\",\"oval\",\"ordinary\",\"homely\",\"tedious\",\"therapeutic\",\"dry\",\"cat\",\"guess\",\"rule\",\"worry\",\"blush\",\"willing\",\"ultra\",\"vivacious\",\"gigantic\",\"repair\",\"form\",\"cave\",\"road\",\"expect\",\"spotty\",\"act\",\"hurry\",\"bells\",\"saw\",\"crabby\",\"signal\",\"lumpy\",\"cherries\",\"erect\",\"dogs\",\"cheat\",\"blue-eyed\",\"treatment\",\"precious\",\"elbow\",\"abrupt\",\"curtain\",\"hapless\",\"overt\",\"nut\",\"babies\",\"lovely\",\"discovery\",\"goofy\",\"pricey\",\"combative\",\"zoom\",\"argue\",\"hellish\",\"useless\",\"incompetent\",\"design\",\"dare\",\"strap\",\"versed\",\"elegant\",\"glossy\",\"sneeze\",\"territory\",\"save\",\"three\",\"defiant\",\"third\",\"feeling\",\"detect\",\"spare\",\"boundless\",\"exuberant\",\"drum\",\"approve\",\"berserk\",\"geese\",\"subdued\",\"rot\",\"insidious\",\"shave\",\"reason\",\"ice\",\"pen\",\"untidy\",\"tease\",\"omniscient\",\"history\",\"dead\",\"nimble\",\"thumb\",\"smart\",\"badge\",\"macabre\",\"swift\",\"magical\",\"screeching\",\"analyse\",\"kaput\",\"talented\",\"shiny\",\"successful\",\"hobbies\",\"humor\",\"flower\",\"frightening\",\"scare\",\"kindhearted\",\"charming\",\"unequaled\",\"moor\",\"gleaming\",\"sense\",\"substance\",\"funny\",\"knowledgeable\",\"sharp\",\"accidental\",\"wing\",\"grade\",\"sun\",\"ink\",\"tame\",\"shaky\",\"efficient\",\"educated\",\"plane\",\"madly\",\"crush\",\"tough\",\"awful\",\"table\",\"whispering\",\"acoustics\",\"boy\",\"naughty\",\"crooked\",\"smile\",\"nutritious\",\"horn\",\"terrify\",\"pollution\",\"selection\",\"ignorant\",\"disturbed\",\"cumbersome\",\"sparkling\",\"royal\",\"blind\",\"linen\",\"uppity\",\"aware\",\"mighty\",\"bad\",\"bright\",\"used\",\"suit\",\"punish\",\"check\",\"sore\",\"mourn\",\"minor\",\"long\",\"sock\",\"longing\",\"health\",\"squirrel\",\"oceanic\",\"plant\",\"lopsided\",\"wholesale\",\"call\",\"limping\",\"support\",\"tow\",\"itchy\",\"wide\",\"comfortable\",\"lewd\",\"death\",\"mean\",\"school\",\"pets\",\"typical\",\"legs\",\"thaw\",\"wiry\",\"symptomatic\",\"offend\",\"ad hoc\",\"occur\",\"post\",\"wipe\",\"scared\",\"phobic\",\"disastrous\",\"shop\",\"guard\",\"likeable\",\"massive\",\"uninterested\",\"bashful\",\"pin\",\"battle\",\"clumsy\",\"whisper\",\"committee\",\"capable\",\"difficult\",\"hunt\",\"grouchy\",\"dad\",\"second\",\"rob\",\"like\",\"tranquil\",\"horses\",\"wealth\",\"defective \",\"curly\",\"eager\",\"ahead\",\"spoil\",\"attack\",\"approva\"];","import { words } from './words'\n\n// Returns a string with random words \nexport const getRandomWords = (length) => {\n    let arr = [];\n    while (length--) { \n        arr.push(words[Math.floor(Math.random() * words.length)])\n    }\n    return arr\n}\n","import React from 'react';\nimport '../css/TextDisplay.css'\nimport { getRandomWords } from '../lib/randomWords'\n\nconst colors = {\n    correctWord: \"rgba(119, 219, 119, 0.37)\",\n    activeWord: \"rgba(255, 0, 0, 0.3)\",\n}\n\nclass TextDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n        let randomWords = getRandomWords(7)\n        this.state = {\n            words: randomWords,\n            wordObjects: this.getWordsObjects(randomWords),\n        }\n    }\n    \n    componentDidUpdate(oldProps) {\n        if (oldProps !== this.props) {\n            this.handlePropsChange(this.props)\n        }\n    }\n\n    breakText = (text) => text.split(' ').filter(ele => ele !== '');\n\n    handlePropsChange = (newProps) => {\n        let typedWords = this.breakText(newProps.typedText);\n        let displayedWords = this.state.wordObjects;\n        for (let i=0;i < Math.min(typedWords.length, displayedWords.length);i++) {\n            displayedWords[i].bgColor = typedWords[i] === displayedWords[i].value ? \n            colors.correctWord: colors.activeWord;\n            displayedWords[i].correct = typedWords[i] === displayedWords[i].value\n        }\n        this.setState({wordObjects: displayedWords})\n        if (this.isComplete()) {\n            this.resetWords()\n        }\n    }\n\n    isComplete = () => this.breakText(this.props.typedText).length > this.state.words.length || \n        this.state.wordObjects[this.state.wordObjects.length-1].correct\n\n    resetWords = () => {\n        let randomWords = getRandomWords(7)\n        this.setState({\n            words: randomWords,\n            wordObjects: this.getWordsObjects(randomWords),\n        })\n        this.props.resetCallback()\n    }\n\n    getWordsObjects = (words) => words.map(word => {\n        return {value: word, bgColor: \"#fff\", correct: false}\n    })\n\n    render() {\n        return(\n            <div className=\"words-holder\">\n                {this.state.wordObjects.map((word, id) => {\n                    return <span \n                    style={{backgroundColor: word.bgColor}} \n                    className=\"word\" key={id}>{word.value}</span>\n                })} \n            </div>\n        )\n    }\n}\n\nexport default TextDisplay;","import React from 'react';\nimport TextDisplay from './components/TextDisplay';\nimport './css/App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      typedText: \"\"\n    }\n  }\n\n  handleInput = (e) => {\n    this.setState({typedText: e.target.value})\n  }\n\n  resetInput = () => this.setState({\n    typedText: \"\",\n  })\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TextDisplay typedText={this.state.typedText} resetCallback={this.resetInput} />\n        <input value={this.state.typedText} id=\"text-input\" className=\"text-input\" onChange={this.handleInput} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}