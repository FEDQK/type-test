{"version":3,"sources":["components/TextDisplay.js","lib/speed.js","lib/timer.js","lib/wordBank.js","lib/wordOperations.js","App.js","serviceWorker.js","index.js"],"names":["colors","correct","wrong","inactive","TextDisplay","props","className","words","map","word","id","style","backgroundColor","state","key","value","speed","startTime","wordStates","evaluateTypedWords","displayedWords","typedWords","i","wordObj","length","App","handleInput","e","timerStarted","Date","now","console","info","inputWords","target","split","filter","ele","wordsToDisplay","randomWords","setState","typedText","isComplete","reset","freshState","sec","newSpeed","Math","round","avgSpeed","calculateSpeed","durationInMs","stopTimer","arr","push","floor","random","getRandomWords","href","data-color-scheme","data-icon","data-size","data-show-count","aria-label","this","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f7a1b6f9.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/TextDisplay.css'\n\nconst colors = {\n    correct: \"rgba(119, 219, 119, 0.1)\",\n    wrong: \"rgba(255, 0, 0, 0.1)\",\n    inactive: \"#202020\",\n}\n\nexport default function TextDisplay(props) {\n    return (\n        <div className=\"words-holder\">\n            {props.words.map((word, id) => {\n                return <span \n                style={{backgroundColor: colors[word.state]}} \n                className=\"word\" key={id}>{word.value}</span>\n            })} \n        </div>\n    )\n}\n","var speed = 0;\n\nexport const calculateSpeed = (words, sec) => {\n    let newSpeed = Math.round((words/sec)*60)\n    let avgSpeed = speed === 0 ? newSpeed : Math.round((speed + newSpeed)/2)\n    speed = avgSpeed\n    return avgSpeed\n}\n","var startTime = 0;\n\nexport const startTimer = () => {\n    startTime = Date.now()\n    console.info(\"started time\")\n}\n\nexport const stopTimer = () => {\n    let durationInMs = Date.now() - startTime\n    startTime = 0\n    console.info(\"stopped time\")\n    return durationInMs/1000\n}","export const words = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\"dusty\",\"spade\",\"flowers\",\"competition\",\"selfish\",\"fallacious\",\"brainy\",\"hum\",\"special\",\"frequent\",\"bite\",\"taste\",\"religion\",\"unbecoming\",\"festive\",\"illustrious\",\"jaded\",\"private\",\"lunchroom\",\"imagine\",\"beg\",\"zesty\",\"calendar\",\"puny\",\"violet\",\"stretch\",\"cloistered\",\"minister\",\"frame\",\"office\",\"four\",\"switch\",\"grain\",\"try\",\"true\",\"practise\",\"snails\",\"round\",\"quiet\",\"fetch\",\"flowery\",\"wrestle\",\"faded\",\"camera\",\"crowded\",\"quiver\",\"snobbish\",\"introduce\",\"squeak\",\"diligent\",\"feigned\",\"unit\",\"refuse\",\"sidewalk\",\"pass\",\"rub\",\"domineering\",\"bore\",\"six\",\"scarecrow\",\"purring\",\"flagrant\",\"breath\",\"laughable\",\"divide\",\"choke\",\"voice\",\"panicky\",\"year\",\"earsplitting\",\"unknown\",\"division\",\"visit\",\"complain\",\"sassy\",\"bone\",\"heartbreaking\",\"delirious\",\"supply\",\"oval\",\"ordinary\",\"homely\",\"tedious\",\"therapeutic\",\"dry\",\"cat\",\"guess\",\"rule\",\"worry\",\"blush\",\"willing\",\"ultra\",\"vivacious\",\"gigantic\",\"repair\",\"form\",\"cave\",\"road\",\"expect\",\"spotty\",\"act\",\"hurry\",\"bells\",\"saw\",\"crabby\",\"signal\",\"lumpy\",\"cherries\",\"erect\",\"dogs\",\"cheat\",\"blue-eyed\",\"treatment\",\"precious\",\"elbow\",\"abrupt\",\"curtain\",\"hapless\",\"overt\",\"nut\",\"babies\",\"lovely\",\"discovery\",\"goofy\",\"pricey\",\"combative\",\"zoom\",\"argue\",\"hellish\",\"useless\",\"incompetent\",\"design\",\"dare\",\"strap\",\"versed\",\"elegant\",\"glossy\",\"sneeze\",\"territory\",\"save\",\"three\",\"defiant\",\"third\",\"feeling\",\"detect\",\"spare\",\"boundless\",\"exuberant\",\"drum\",\"approve\",\"berserk\",\"geese\",\"subdued\",\"rot\",\"insidious\",\"shave\",\"reason\",\"ice\",\"pen\",\"untidy\",\"tease\",\"omniscient\",\"history\",\"dead\",\"nimble\",\"thumb\",\"smart\",\"badge\",\"macabre\",\"swift\",\"magical\",\"screeching\",\"analyse\",\"kaput\",\"talented\",\"shiny\",\"successful\",\"hobbies\",\"humor\",\"flower\",\"frightening\",\"scare\",\"kindhearted\",\"charming\",\"unequaled\",\"moor\",\"gleaming\",\"sense\",\"substance\",\"funny\",\"knowledgeable\",\"sharp\",\"accidental\",\"wing\",\"grade\",\"sun\",\"ink\",\"tame\",\"shaky\",\"efficient\",\"educated\",\"plane\",\"madly\",\"crush\",\"tough\",\"awful\",\"table\",\"whispering\",\"acoustics\",\"boy\",\"naughty\",\"crooked\",\"smile\",\"nutritious\",\"horn\",\"terrify\",\"pollution\",\"selection\",\"ignorant\",\"disturbed\",\"cumbersome\",\"sparkling\",\"royal\",\"blind\",\"linen\",\"uppity\",\"aware\",\"mighty\",\"bad\",\"bright\",\"used\",\"suit\",\"punish\",\"check\",\"sore\",\"mourn\",\"minor\",\"long\",\"sock\",\"longing\",\"health\",\"squirrel\",\"oceanic\",\"plant\",\"lopsided\",\"wholesale\",\"call\",\"limping\",\"support\",\"tow\",\"itchy\",\"wide\",\"comfortable\",\"lewd\",\"death\",\"mean\",\"school\",\"pets\",\"typical\",\"legs\",\"thaw\",\"wiry\",\"symptomatic\",\"offend\",\"ad hoc\",\"occur\",\"post\",\"wipe\",\"scared\",\"phobic\",\"disastrous\",\"shop\",\"guard\",\"likeable\",\"massive\",\"uninterested\",\"bashful\",\"pin\",\"battle\",\"clumsy\",\"whisper\",\"committee\",\"capable\",\"difficult\",\"hunt\",\"grouchy\",\"dad\",\"second\",\"rob\",\"like\",\"tranquil\",\"horses\",\"wealth\",\"defective \",\"curly\",\"eager\",\"ahead\",\"spoil\",\"attack\",\"approva\"];","import { words } from './wordBank'\n\nexport const wordStates = {\n    CORRECT: \"correct\",\n    WRONG: \"wrong\",\n    INACTIVE: \"inactive\",\n}\n\n// Returns a string with random words \nexport const getRandomWords = (length) => {\n    let arr = [];\n    while (length--) { \n        arr.push(words[Math.floor(Math.random() * words.length)])\n    }\n    return arr\n}\n\nexport const evaluateTypedWords = (displayedWords, typedWords) => displayedWords.map((word, i) => {\n    let wordObj = {value: word, state: null}\n    if (i < typedWords.length) {\n        wordObj.state = typedWords[i] === word ?\n            wordStates.CORRECT : wordStates.WRONG\n        return wordObj\n    }\n    wordObj.state = wordStates.INACTIVE\n    return wordObj\n})\n\nexport const breakText = (text) => text.split(' ').filter(ele => ele !== '');","import React from 'react';\nimport GitHubButton from \"react-github-btn\"\nimport TextDisplay from './components/TextDisplay'\nimport './css/App.css'\nimport { calculateSpeed } from \"./lib/speed\"\nimport { startTimer, stopTimer } from \"./lib/timer\"\nimport { breakText, evaluateTypedWords, getRandomWords, wordStates } from './lib/wordOperations';\n\nconst numberOfWords = 5\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = this.freshState()\n    this.timerStarted = false\n  }\n\n  handleInput = (e) => {\n    if (!this.timerStarted) {\n      startTimer()\n    }\n    this.timerStarted = true\n    let inputWords = breakText(e.target.value)\n    let wordsToDisplay = evaluateTypedWords(this.state.randomWords, inputWords)\n    this.setState({\n      typedText: e.target.value,\n      wordsToDisplay: wordsToDisplay,\n    })\n    if (this.isComplete(wordsToDisplay, inputWords)) {\n      this.reset()\n    }\n  }\n\n  reset = () => {\n    let state = this.freshState()\n    state.speed = calculateSpeed(numberOfWords, stopTimer())\n    this.setState(state)\n    this.timerStarted = false\n  }\n\n\n  isComplete = (wordsToDisplay, inputWords) => inputWords.length > this.state.randomWords.length || \n    wordsToDisplay[wordsToDisplay.length-1].state === wordStates.CORRECT\n\n  freshState = () => {\n    let randomWords = getRandomWords(numberOfWords)\n    return {\n      typedText: \"\",\n      speed: 0,\n      randomWords: randomWords,\n      wordsToDisplay: evaluateTypedWords(randomWords, []),\n    }\n  }\n\n  render() {\n    return (\n      <>\n      <div className=\"gitBtn\">\n        <GitHubButton href=\"https://github.com/arjunmahishi/type-test\" data-color-scheme=\"no-preference: light; light: light; dark: dark;\" data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star arjunmahishi/type-test on GitHub\">Star</GitHubButton>\n      </div>\n      <h1 className=\"appName\">type-test</h1>\n      <div className=\"App\">       \n        <h2 className=\"speed\">{this.state.speed} wpm</h2>\n        <TextDisplay words={this.state.wordsToDisplay} />\n        <input value={this.state.typedText} \n          id=\"text-input\" \n          className=\"text-input\" \n          onChange={this.handleInput} \n        />\n      </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}